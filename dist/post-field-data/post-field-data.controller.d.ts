import { PostFieldDataService } from './post-field-data.service';
import { CreateParkingDto } from './dto/parkingdto/createParkingdto';
import { CreatePropertyCategoryDto } from './dto/propertyCategoryDto/createPropertyCategoryDto';
import { CreatePropertyTypeDto } from './dto/propertyTypeDto/createPropertyTypeDto';
import { CreateSellTypeDto } from './dto/sellTypeDto/createSellType.dto';
import { CreateTagsDto } from './dto/tagsDto/createTags.dto';
import { Parking } from './entities/parking.entity.dto';
import { PropertyCategory } from './entities/propertycategoryentity.dto';
import { PropertyType } from './entities/PropertyTypeEntity.dto';
import { SellType } from './entities/sellType.entity.dto';
import { Tags } from './entities/tags.entity.dto';
import { UpdateParkingDto } from './dto/parkingdto/updateParkingDto';
import { UpdatePropertyCategoryDto } from './dto/propertyCategoryDto/updatePropertyCategoryDto';
import { UpdatePropertyTypeDto } from './dto/propertyTypeDto/updatePropertyTypeDto';
import { UpdateSellTypeDto } from './dto/sellTypeDto/updateSellType.dto';
import { UpdateTagsDto } from './dto/tagsDto/updateTags.dto';
export declare class PostFieldDataController {
    private readonly postFieldDataService;
    constructor(postFieldDataService: PostFieldDataService);
    createParking(createParkingDto: CreateParkingDto): Promise<Parking>;
    createPropertyCategory(createPropertyCategoryDto: CreatePropertyCategoryDto): Promise<PropertyCategory>;
    createPropertyType(createPropertyTypeDto: CreatePropertyTypeDto): Promise<PropertyType>;
    createSellType(createSellTypeDto: CreateSellTypeDto): Promise<SellType>;
    createTags(createTagsDto: CreateTagsDto): Promise<SellType>;
    findAllParking(): Promise<Parking[]>;
    findAllPropertyCategory(): Promise<PropertyCategory[]>;
    findAllPropertyType(): Promise<PropertyType[]>;
    findAllSellType(): Promise<SellType[]>;
    findAllTags(): Promise<Tags[]>;
    updateParking(id: string, updateParkingDto: UpdateParkingDto): Promise<Parking>;
    updatePropertyCategory(id: string, updatePropertyCategoryDto: UpdatePropertyCategoryDto): Promise<Parking>;
    updatePropertyType(id: string, updatePropertyTypeDto: UpdatePropertyTypeDto): Promise<Parking>;
    updateSellType(id: string, updateSellTypeDto: UpdateSellTypeDto): Promise<Parking>;
    updateTags(id: string, updateTagsDto: UpdateTagsDto): Promise<Parking>;
    deleteParking(id: string): Promise<Parking>;
    deletePropertyCategory(id: string): Promise<PropertyCategory>;
    deletePropertyType(id: string): Promise<PropertyType>;
    deleteSellType(id: string): Promise<SellType>;
    deleteTags(id: string): Promise<Tags>;
}
